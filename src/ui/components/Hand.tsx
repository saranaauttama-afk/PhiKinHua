import React from 'react';
import { View, Text, Pressable, Animated } from 'react-native';
import type { CardData } from '../../core/types';
import type { ThemeTokens } from '../theme';
import { shadowStyle } from '../theme';
import CardFrame from './CardFrame';
import { haptics } from '../haptics';

type Props = {
    hand: CardData[];
    energy: number;
    theme: ThemeTokens;
    onPlay: (index: number) => void;
};

function CardButton({
    disabled, onPress, theme, borderColor, borderWidth, children,
}: {
    disabled?: boolean;
    onPress: () => void;
    theme: ThemeTokens;
    borderColor?: string;            // ‚úÖ ‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    borderWidth?: number;            // ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    children: React.ReactNode;
}) {
    const scale = React.useRef(new Animated.Value(1)).current;
    
  const pressIn = () => {
    haptics.tapSoft(); // ‚úÖ ‡∏ü‡∏µ‡∏•‡∏™‡∏±‡∏°‡∏ú‡∏±‡∏™‡πÄ‡∏ö‡∏≤ ‡πÜ ‡∏ï‡∏≠‡∏ô‡∏Å‡∏î
    Animated.timing(scale, { toValue: 0.97, duration: 100, useNativeDriver: true }).start();
  };
    const pressOut = () => Animated.timing(scale, { toValue: 1, duration: 100, useNativeDriver: true }).start();
    return (
        <Animated.View style={[
            { transform: [{ scale }], opacity: disabled ? 0.6 : 1 },
            shadowStyle(2, theme.colors.vignetteEdge ?? '#000'),
        ]}>
            <Pressable
                onPress={() => { haptics.playCard(); onPress(); }}  // ‚úÖ ‡πÄ‡∏•‡πà‡∏ô‡πÑ‡∏û‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡∏ü‡∏µ‡∏î‡πÅ‡∏ö‡πá‡∏Å Medium
                disabled={disabled}
                onPressIn={pressIn}
                onPressOut={pressOut}
                style={{
                    paddingHorizontal: 12, paddingVertical: 8,
                    borderRadius: theme.radius.card,
                    borderWidth: borderWidth ?? 1,
                    borderColor: borderColor ?? theme.colors.border,   // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏à‡∏£‡∏¥‡∏á
                    backgroundColor: 'rgba(0,0,0,0.35)',
                    position: 'relative', // ‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö badge ‡πÅ‡∏ö‡∏ö absolute
                }}
            >
                {children}
            </Pressable>
        </Animated.View>
    );
}

export default function Hand({ hand, energy, theme, onPlay }: Props) {
    // ‡πÄ‡∏Å‡πá‡∏ö Animated.Value ‡∏ï‡πà‡∏≠‡πÉ‡∏ö ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ö "‡πÉ‡∏´‡∏°‡πà" ‡∏Ñ‡πà‡∏≠‡∏¢‡πÜ ‡πÇ‡∏ú‡∏•‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤
    const animsRef = React.useRef<Animated.Value[]>([]);
    const prevLenRef = React.useRef<number>(0);
    const [, setTick] = React.useState(0);

    React.useEffect(() => {
        const prevLen = prevLenRef.current;
        if (hand.length < animsRef.current.length) {
            animsRef.current = animsRef.current.slice(0, hand.length);
        }
        let created = false;
        if (hand.length > prevLen) {
            // ‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ opacity=0/translateY=12 ‡πÅ‡∏•‡πâ‡∏ß animate ‚Üí 1/0
            for (let i = prevLen; i < hand.length; i++) {
                const v = new Animated.Value(0);
                animsRef.current[i] = v;
                created = true;
                Animated.timing(v, { toValue: 1, duration: 240, useNativeDriver: true }).start();
            }
        }
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πå‡∏î‡πÉ‡∏´‡∏°‡πà ‡∏™‡∏±‡πà‡∏á re-render ‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ style ‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö Animated.Value ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
        if (created) setTick(t => t + 1);
        prevLenRef.current = hand.length;
    }, [hand.length]);

    return (
        <View style={{ flexDirection: 'row', flexWrap: 'wrap' }}>
            {hand.map((c, i) => {
                const canPlay = energy >= (c.cost ?? 0);
                const a = animsRef.current[i];
                const animatedStyle = a
                    ? { opacity: a, transform: [{ translateY: a.interpolate({ inputRange: [0, 1], outputRange: [12, 0] }) }] }
                    : undefined;
                // ‡∏™‡∏µ‡∏Ç‡∏≠‡∏ö‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏ï‡∏≤‡∏° rarity (Rare ‡πÉ‡∏ä‡πâ accent, Uncommon ‡πÉ‡∏ä‡πâ textMuted)
                const borderColor =
                    c.rarity === 'Rare' ? theme.colors.accent :
                        c.rarity === 'Uncommon' ? theme.colors.textMuted :
                            theme.colors.border;
                const borderWidth = c.rarity === 'Rare' ? 2 : 1;
                const isRareFoil = theme.id === 'thai_fairytale' && c.rarity === 'Rare';
                return (
                    <Animated.View
                        key={`${c.id}-${i}`}
                        // ‚úÖ ‡πÉ‡∏™‡πà margin ‡∏ó‡∏µ‡πà "‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏ô‡∏≠‡∏Å‡∏™‡∏∏‡∏î" ‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πå‡∏î
                        style={[animatedStyle, { marginRight: 8, marginBottom: 8 }]}
                    >
                        {/* ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Å‡∏£‡∏≠‡∏ö‡∏ó‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Rare  ‡∏™‡∏Å‡∏¥‡∏ô thai_fairytale */}
                        <CardFrame
                            theme={theme}
                            radius={theme.radius.card}
                            strokeWidth={1}
                            enabled={isRareFoil}
                        >
                            <CardButton
                                disabled={!canPlay}
                                onPress={() => onPlay(i)}
                                theme={theme}
                                borderColor={isRareFoil ? 'transparent' : borderColor}  // ‚ùóÔ∏è‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏¢‡∏•‡πå
                                borderWidth={isRareFoil ? 0 : borderWidth}               // ‚ùóÔ∏è‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏ô‡∏≤‡∏ã‡πâ‡∏≠‡∏ô
                            >
                                {/* Header: ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πå‡∏î */}
                                <Text style={{ color: theme.colors.text, fontWeight: '600', paddingRight: 36 }}>
                                    {c.name} {c.rarity ? `(${c.rarity})` : ''}
                                </Text>
                                {/* Icon row: ‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ */}
                                <View style={{ flexDirection: 'row', flexWrap: 'wrap', gap: 6, marginTop: 4 }}>
                                    {c.dmg ? (
                                        <Text style={{ color: '#fca5a5' }}>‚öî {c.dmg}</Text>
                                    ) : null}
                                    {c.block ? (
                                        <Text style={{ color: '#93c5fd' }}>üõ° {c.block}</Text>
                                    ) : null}
                                    {c.energyGain ? (
                                        <Text style={{ color: theme.colors.accent }}>‚ö° +{c.energyGain}</Text>
                                    ) : null}
                                    {c.draw ? (
                                        <Text style={{ color: theme.colors.good }}>üÉè +{c.draw}</Text>
                                    ) : null}
                                </View>
                                {/* Cost badge: ‡∏°‡∏∏‡∏°‡∏Ç‡∏ß‡∏≤‡∏ö‡∏ô */}
                                <View
                                    style={{
                                        position: 'absolute', top: 6, right: 6,
                                        minWidth: 26, height: 26, borderRadius: 13,
                                        alignItems: 'center', justifyContent: 'center',
                                        paddingHorizontal: 6,
                                        backgroundColor: 'rgba(0,0,0,0.5)',
                                        borderWidth: 1,
                                        borderColor: theme.colors.border,
                                    }}
                                >
                                    <Text style={{ color: theme.colors.text, fontWeight: '700' }}>
                                        {c.cost}
                                    </Text>
                                </View>
                            </CardButton>
                        </CardFrame>
                    </Animated.View>
                );
            })}
        </View>
    );
}
